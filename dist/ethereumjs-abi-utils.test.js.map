{"version":3,"file":"ethereumjs-abi-utils.test.js","sourceRoot":"","sources":["../src/ethereumjs-abi-utils.test.ts"],"names":[],"mappings":";;;;;AAAA,kDAAuB;AAEvB,iEAA8E;AAE9E,QAAQ,CAAC,0BAA0B,EAAE;IACnC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,gCAAS,EACjB,CAAC,QAAQ,CAAC,EACV;YACE,IAAI,eAAE,CACJ,iEAAiE,EACjE,EAAE,CACH;SACF,CACF,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,0BAA0B,EAAE;IACnC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,gCAAS,EACjB,CAAC,QAAQ,CAAC,EACV;YACE,oMAAoM;SACrM,CACF,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,MAAM,CAAC,GACL,kkBAAkkB,CAAC;QACrkB,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,0BAA0B,EAAE;IACnC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,gCAAS,EAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtD,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wCAAwC,EAAE;IACjD,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,gCAAS,EACjB,CAAC,QAAQ,CAAC,EACV,CAAC,iCAAiC,CAAC,CACpC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,MAAM,CAAC,GACL,kMAAkM,CAAC;QACrM,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,UAAU,EAAE;IACnB,EAAE,CAAC,yBAAyB,EAAE;QAC5B,MAAM,CAAC,GAAG,IAAA,gCAAS,EAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtD,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACzB,MAAM,CAAC,GAAG,IAAA,gCAAS,EAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACnD,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE;QAC3B,MAAM,CAAC,GAAG,IAAA,gCAAS,EAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtD,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,MAAM,CAAC,GAAG,IAAA,gCAAS,EAAC,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CACrE,KAAK,CACN,CAAC;QACF,MAAM,CAAC,GACL,kUAAkU,CAAC;QACrU,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,kBAAkB,EAAE;IAC3B,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,MAAa,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CACzD,iCAAiC,CAClC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,uBAAuB,EAAE;IAChC,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CACpD,qCAAqC,CACtC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6BAA6B,EAAE;IACtC,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CACzD,yCAAyC,CAC1C,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,gBAAgB,EAAE;IACzB,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,MAAa,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CACvD,iCAAiC,CAClC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,kBAAkB,EAAE;IAC3B,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,MAAa,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CACzD,iCAAiC,CAClC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,eAAe,EAAE;IACxB,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAC9C,2BAA2B,CAC5B,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,+BAA+B,EAAE;IACxC,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CACvD,+BAA+B,CAChC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,+BAA+B,EAAE;IACxC,EAAE,CAAC,aAAa,EAAE;QAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,gCAAS,EAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,eAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAC/D,sCAAsC,CACvC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6BAA6B,EAAE;IACtC,EAAE,CAAC,cAAc,EAAE;QACjB,IAAI,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,CAAC,GAAG,IAAI,CAAC;QACT,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,gCAAgC,EAAE;IACzC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EACpB,CAAC,SAAS,CAAC,EACX,CAAC,IAAI,eAAE,CAAC,0CAA0C,EAAE,EAAE,CAAC,CAAC,CACzD,CAAC;QACF,MAAM,CAAC,GAAG,0CAA0C,CAAC;QACrD,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,+BAA+B,EAAE;IACxC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,UAAU,CAAC;QACrB,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,8BAA8B,EAAE;IACvC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,CAAC,GAAG,QAAQ,CAAC;QACnB,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,+BAA+B,EAAE;IACxC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,CAAC,GAAG,kBAAkB,CAAC;QAC7B,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6BAA6B,EAAE;IACtC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,+BAA+B,EAAE;IACxC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,GAAG,MAAM,CAAC;QACjB,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,4BAA4B,EAAE;IACrC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,8BAA8B,EAAE;IACvC,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,GAAG,MAAM,CAAC;QACjB,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2CAA2C,EAAE;IACpD,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EACpB,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EACnD,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC3C,CAAC;QACF,MAAM,CAAC,GACL,kGAAkG,CAAC;QACrG,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,iCAAiC,EAAE;IAC1C,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,GACL,kIAAkI,CAAC;QACrI,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,iCAAiC,EAAE;IAC1C,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EACpB,CAAC,UAAU,CAAC,EACZ;YACE;gBACE,CAAC,IAAI,EAAE,KAAK,CAAC;gBACb,CAAC,KAAK,EAAE,IAAI,CAAC;aACd;SACF,CACF,CAAC;QACF,MAAM,CAAC,GACL,kQAAkQ,CAAC;QACrQ,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,kCAAkC,EAAE;IAC3C,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EACpB,CAAC,WAAW,CAAC,EACb,CAAC,CAAC,IAAI,eAAE,CAAC,0CAA0C,EAAE,EAAE,CAAC,CAAC,CAAC,CAC3D,CAAC;QACF,MAAM,CAAC,GACL,kEAAkE,CAAC;QACrE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,kCAAkC,EAAE;IAC3C,EAAE,CAAC,cAAc,EAAE;QACjB,MAAM,CAAC,GAAG,IAAA,mCAAY,EAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,GACL,kIAAkI,CAAC;QACrI,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,oEAAoE,EAAE;IAC7E,EAAE,CAAC,4DAA4D,EAAE;QAC/D,MAAM,CAAC,GAAG,EAAE;YACV,IAAA,mCAAY,EAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC,OAAO,CAAC,6CAA6C,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,yDAAyD,EAAE;IAClE,EAAE,CAAC,wCAAwC,EAAE;QAC3C,MAAM,CAAC,GAAG,EAAE;YACV,IAAA,kCAAW,EAAC,EAAE,IAAI,EAAE,MAAM,EAAS,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import BN from 'bn.js';\n\nimport { rawEncode, solidityPack, parseNumber } from './ethereumjs-abi-utils';\n\ndescribe('encoding negative int256', function () {\n  it('should equal', function () {\n    const a = rawEncode(\n      ['int256'],\n      [\n        new BN(\n          '-19999999999999999999999999999999999999999999999999999999999999',\n          10,\n        ),\n      ],\n    ).toString('hex');\n    const b =\n      'fffffffffffff38dd0f10627f5529bdb2c52d4846810af0ac000000000000001';\n    expect(a).toStrictEqual(b);\n  });\n});\n\ndescribe('encoding string >32bytes', function () {\n  it('should equal', function () {\n    const a = rawEncode(\n      ['string'],\n      [\n        ' hello world hello world hello world hello world  hello world hello world hello world hello world  hello world hello world hello world hello world hello world hello world hello world hello world',\n      ],\n    ).toString('hex');\n    const b =\n      '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c22068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c64202068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c64202068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c64000000000000000000000000000000000000000000000000000000000000';\n    expect(a).toStrictEqual(b);\n  });\n});\n\ndescribe('encoding uint32 response', function () {\n  it('should equal', function () {\n    const a = rawEncode(['uint32'], [42]).toString('hex');\n    const b =\n      '000000000000000000000000000000000000000000000000000000000000002a';\n    expect(a).toStrictEqual(b);\n  });\n});\n\ndescribe('encoding string response (unsupported)', function () {\n  it('should equal', function () {\n    const a = rawEncode(\n      ['string'],\n      ['a response string (unsupported)'],\n    ).toString('hex');\n    const b =\n      '0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001f6120726573706f6e736520737472696e672028756e737570706f727465642900';\n    expect(a).toStrictEqual(b);\n  });\n});\n\ndescribe('encoding', function () {\n  it('should work for uint256', function () {\n    const a = rawEncode(['uint256'], [1]).toString('hex');\n    const b =\n      '0000000000000000000000000000000000000000000000000000000000000001';\n    expect(a).toStrictEqual(b);\n  });\n\n  it('should work for uint', function () {\n    const a = rawEncode(['uint'], [1]).toString('hex');\n    const b =\n      '0000000000000000000000000000000000000000000000000000000000000001';\n    expect(a).toStrictEqual(b);\n  });\n\n  it('should work for int256', function () {\n    const a = rawEncode(['int256'], [-1]).toString('hex');\n    const b =\n      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n    expect(a).toStrictEqual(b);\n  });\n\n  it('should work for string and uint256[2]', function () {\n    const a = rawEncode(['string', 'uint256[2]'], ['foo', [5, 6]]).toString(\n      'hex',\n    );\n    const b =\n      '0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003666f6f0000000000000000000000000000000000000000000000000000000000';\n    expect(a).toStrictEqual(b);\n  });\n});\n\ndescribe('encoding bytes33', function () {\n  it('should fail', function () {\n    expect(() => rawEncode('fail' as any, ['bytes33'])).toThrow(\n      'types.forEach is not a function',\n    );\n  });\n});\n\ndescribe('encoding invalid type', function () {\n  it('should fail', function () {\n    expect(() => rawEncode(['fail'], ['bytes33'])).toThrow(\n      'Unsupported or invalid type: \"fail\"',\n    );\n  });\n});\n\ndescribe('encoding invalid fixed type', function () {\n  it('should fail', function () {\n    expect(() => rawEncode(['fixedfail'], ['bytes33'])).toThrow(\n      'Invalid parseTypeNxM input \"fixedfail\".',\n    );\n  });\n});\n\ndescribe('encoding uint0', function () {\n  it('should fail', function () {\n    expect(() => rawEncode('fail' as any, ['uint0'])).toThrow(\n      'types.forEach is not a function',\n    );\n  });\n});\n\ndescribe('encoding uint257', function () {\n  it('should fail', function () {\n    expect(() => rawEncode('fail' as any, ['uint257'])).toThrow(\n      'types.forEach is not a function',\n    );\n  });\n});\n\ndescribe('encoding int0', function () {\n  it('should fail', function () {\n    expect(() => rawEncode(['int0'], [1])).toThrow('Invalid int<N> width: 0');\n  });\n});\n\ndescribe('encoding int257', function () {\n  it('should fail', function () {\n    expect(() => rawEncode(['int257'], [1])).toThrow(\n      'Invalid int<N> width: 257',\n    );\n  });\n});\n\ndescribe('encoding uint[2] with [1,2,3]', function () {\n  it('should fail', function () {\n    expect(() => rawEncode(['uint[2]'], [[1, 2, 3]])).toThrow(\n      'Elements exceed array size: 2',\n    );\n  });\n});\n\ndescribe('encoding uint8 with 9bit data', function () {\n  it('should fail', function () {\n    expect(() => rawEncode(['uint8'], [new BN(1).iushln(9)])).toThrow(\n      'Supplied uint exceeds width: 8 vs 10',\n    );\n  });\n});\n\ndescribe('solidity tight packing bool', function () {\n  it('should equal', function () {\n    let a = solidityPack(['bool'], [true]);\n    let b = '01';\n    expect(a.toString('hex')).toStrictEqual(b);\n    a = solidityPack(['bool'], [false]);\n    b = '00';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing address', function () {\n  it('should equal', function () {\n    const a = solidityPack(\n      ['address'],\n      [new BN('43989fb883ba8111221e89123897538475893837', 16)],\n    );\n    const b = '43989fb883ba8111221e89123897538475893837';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing string', function () {\n  it('should equal', function () {\n    const a = solidityPack(['string'], ['test']);\n    const b = '74657374';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing bytes', function () {\n  it('should equal', function () {\n    const a = solidityPack(['bytes'], [Buffer.from('123456', 'hex')]);\n    const b = '123456';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing bytes8', function () {\n  it('should equal', function () {\n    const a = solidityPack(['bytes8'], [Buffer.from('123456', 'hex')]);\n    const b = '1234560000000000';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing uint', function () {\n  it('should equal', function () {\n    const a = solidityPack(['uint'], [42]);\n    const b =\n      '000000000000000000000000000000000000000000000000000000000000002a';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing uint16', function () {\n  it('should equal', function () {\n    const a = solidityPack(['uint16'], [42]);\n    const b = '002a';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing int', function () {\n  it('should equal', function () {\n    const a = solidityPack(['int'], [-42]);\n    const b =\n      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing int16', function () {\n  it('should equal', function () {\n    const a = solidityPack(['int16'], [-42]);\n    const b = 'ffd6';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing multiple arguments', function () {\n  it('should equal', function () {\n    const a = solidityPack(\n      ['bytes32', 'uint32', 'uint32', 'uint32', 'uint32'],\n      [Buffer.from('123456', 'hex'), 6, 7, 8, 9],\n    );\n    const b =\n      '123456000000000000000000000000000000000000000000000000000000000000000006000000070000000800000009';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing uint32[]', function () {\n  it('should equal', function () {\n    const a = solidityPack(['uint32[]'], [[8, 9]]);\n    const b =\n      '00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000009';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing bool[][]', function () {\n  it('should equal', function () {\n    const a = solidityPack(\n      ['bool[][]'],\n      [\n        [\n          [true, false],\n          [false, true],\n        ],\n      ],\n    );\n    const b =\n      '0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing address[]', function () {\n  it('should equal', function () {\n    const a = solidityPack(\n      ['address[]'],\n      [[new BN('43989fb883ba8111221e89123897538475893837', 16)]],\n    );\n    const b =\n      '00000000000000000000000043989fb883ba8111221e89123897538475893837';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity tight packing uint32[2]', function () {\n  it('should equal', function () {\n    const a = solidityPack(['uint32[2]'], [[11, 12]]);\n    const b =\n      '000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c';\n    expect(a.toString('hex')).toStrictEqual(b);\n  });\n});\n\ndescribe('solidity packing different amounts of values and types should fail', function () {\n  it('should throw \"Number of types are not matching the values\"', function () {\n    expect(() => {\n      solidityPack(['uint32'], [11, 12]);\n    }).toThrow('Number of types are not matching the values');\n  });\n});\n\ndescribe('parseNumber should throw an error when passed an object', function () {\n  it('should throw \"Argument is not a number', function () {\n    expect(() => {\n      parseNumber({ test: 'test' } as any);\n    }).toThrow('Argument is not a number');\n  });\n});\n"]}